import os
import re
import pandas as pd
import simplekml
import streamlit as st
from io import BytesIO
import tempfile  # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
from datetime import datetime
import xml.etree.ElementTree as ET

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Regex
def parse_coordinates(coord_str):
    try:
        matches = re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", coord_str)
        if len(matches) != 2:
            raise ValueError("Invalid coordinate format")
        lat, lon = map(float, matches)
        return lon, lat
    except Exception:
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á Excel ‡πÄ‡∏õ‡πá‡∏ô KML ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å ID ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
def convert_excel_to_kml(uploaded_file, sheet_name):
    try:
        status_text.text("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")

        # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
        data = pd.read_excel(uploaded_file, sheet_name=sheet_name)

        # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        data.columns = data.columns.str.strip()

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î
        data['‡∏û‡∏¥‡∏Å‡∏±‡∏î'] = data['‡∏û‡∏¥‡∏Å‡∏±‡∏î'].apply(lambda x: parse_coordinates(str(x)) if pd.notna(x) else None)
        data = data.dropna(subset=['‡∏û‡∏¥‡∏Å‡∏±‡∏î'])

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå KML
        kml = simplekml.Kml()

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
        main_folder = kml.newfolder(name="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° ID ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å
        for device_id, group in data.groupby('id'):
            folder = main_folder.newfolder(name=f"ID: {device_id}")  # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° ID
            coords = group.sort_values('‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î')['‡∏û‡∏¥‡∏Å‡∏±‡∏î'].tolist()

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô (LineString) ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ ID
            linestring = folder.newlinestring(name=f"{group['‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏°‡∏™‡∏≤‡∏¢'].iloc[0]} {device_id}")
            linestring.coords = coords
            linestring.style.linestyle.color = simplekml.Color.blue
            linestring.style.linestyle.width = 3

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô description
            description = "\n".join([f"{col}: {group[col].iloc[0]}" for col in data.columns if col != '‡∏û‡∏¥‡∏Å‡∏±‡∏î'])
            linestring.description = description

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î (Point) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á ID ‡∏ô‡∏±‡πâ‡∏ô
            for _, row in group.iterrows():
                point = folder.newpoint(name=f"‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà {row['‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î']}", coords=[row['‡∏û‡∏¥‡∏Å‡∏±‡∏î']])
                point.description = "\n".join([f"{col}: {row[col]}" for col in data.columns if col != '‡∏û‡∏¥‡∏Å‡∏±‡∏î'])
                point.style.iconstyle.color = simplekml.Color.red

        # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏ó‡∏ô `/tmp/`
        temp_dir = tempfile.gettempdir()
        output_filename = os.path.splitext(uploaded_file.name)[0] + ".kml"
        temp_file_path = os.path.join(temp_dir, output_filename)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        kml.save(temp_file_path)

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô BytesIO
        with open(temp_file_path, "rb") as f:
            kml_bytes = BytesIO(f.read())

        status_text.text("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

        return temp_file_path, output_filename, kml_bytes

    except Exception as e:
        status_text.text("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!")
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return None, None, None

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Namespace (KML ‡πÉ‡∏ä‡πâ namespace)
namespace = {'kml': 'http://www.opengis.net/kml/2.2'}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Placemark ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î (Point)
def remove_point_placemarks(parent):
    for placemark in parent.findall("kml:Placemark", namespace):
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏´‡∏ô‡∏î <Point> ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        if placemark.find("kml:Point", namespace) is not None:
            parent.remove(placemark)  

# üîπ ‡πÅ‡∏™‡∏î‡∏á UI ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ
st.set_page_config(page_title="Excel to KML (NTSP)", layout="centered")
st.title("üìç Excel to KML (NTSP)")

# üîπ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î**
uploaded_file = st.file_uploader("üìÇ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel**", type=["xlsx", "xls"])

# üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if uploaded_file is not None:
    try:
        # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô Excel ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Sheet
        excel_data = pd.ExcelFile(uploaded_file)
        sheet_names = excel_data.sheet_names
        sheet_name = st.selectbox("üìÑ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet**", sheet_names)

        # üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        status_text = st.empty()
        remove_points = st.checkbox("‚ùå ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î (Point)")

        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô KML"):
            temp_file_path, output_filename, kml_bytes = convert_excel_to_kml(uploaded_file, sheet_name)

            if kml_bytes:
                st.success("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå KML ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

                # üîπ ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏à‡∏≤‡∏Å KML ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                if remove_points:
                    try:
                        tree = ET.parse(temp_file_path)
                        root = tree.getroot()

                        # ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        for doc_or_folder in root.findall(".//kml:Document", namespace) + root.findall(".//kml:Folder", namespace):
                            remove_point_placemarks(doc_or_folder)

                        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î
                        output_kml = os.path.join(tempfile.gettempdir(), output_filename)
                        tree.write(output_kml, encoding="utf-8", xml_declaration=True)

                        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏∏‡∏î
                        with open(output_kml, "rb") as f:
                            kml_bytes = BytesIO(f.read())

                        st.success("‚úî ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

                    except Exception as e:
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î: {e}")
                        st.exception(e)

                # üîπ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML",
                    data=kml_bytes,
                    file_name=output_filename,
                    mime="application/vnd.google-earth.kml+xml"
                )

    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")
