import os
import re
import pandas as pd
import simplekml
import streamlit as st
from io import BytesIO
import tempfile  # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
from datetime import datetime
import xml.etree.ElementTree as ET

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Regex
def parse_coordinates(coord_str):
    try:
        matches = re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", coord_str)
        if len(matches) != 2:
            raise ValueError("Invalid coordinate format")
        lat, lon = map(float, matches)
        return lon, lat
    except Exception:
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î
def parse_multiple_coordinates(coord_str):
    try:
        coord_pairs = re.findall(r"\(([^)]+)\)", coord_str)
        coordinates = [parse_coordinates(pair) for pair in coord_pairs]
        return [coord for coord in coordinates if coord is not None]
    except Exception:
        return []

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
def filter_by_projects(data, selected_projects):
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if selected_projects:
        return data[data['‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ'].isin(selected_projects)]
    return data  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô convert_excel_to_kml ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
def convert_excel_to_kml(uploaded_file, sheet_name, selected_projects=None):
    try:
        status_text.text("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")

        # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
        data = pd.read_excel(uploaded_file, sheet_name=sheet_name)

        # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        data.columns = data.columns.str.strip()

        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if selected_projects:
            data = filter_by_projects(data, selected_projects)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if data.empty:
                status_text.text("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å!")
                return None, None, None

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î
        data['‡∏û‡∏¥‡∏Å‡∏±‡∏î'] = data['‡∏û‡∏¥‡∏Å‡∏±‡∏î'].apply(lambda x: parse_coordinates(str(x)) if pd.notna(x) else None)
        data = data.dropna(subset=['‡∏û‡∏¥‡∏Å‡∏±‡∏î'])

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå KML
        kml = simplekml.Kml()

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
        main_folder = kml.newfolder(name="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° ID ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å
        for device_id, group in data.groupby('id'):
            folder = main_folder.newfolder(name=f"ID: {device_id}")  # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° ID
            coords = group.sort_values('‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î')['‡∏û‡∏¥‡∏Å‡∏±‡∏î'].tolist()

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô (LineString) ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ ID
            linestring = folder.newlinestring(name=f"{group['‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏°‡∏™‡∏≤‡∏¢'].iloc[0]} {device_id}")
            linestring.coords = coords
            linestring.style.linestyle.color = simplekml.Color.blue
            linestring.style.linestyle.width = 3

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô description
            description = "\n".join([f"{col}: {group[col].iloc[0]}" for col in data.columns if col != '‡∏û‡∏¥‡∏Å‡∏±‡∏î'])
            linestring.description = description

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î (Point) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á ID ‡∏ô‡∏±‡πâ‡∏ô
            for _, row in group.iterrows():
                point = folder.newpoint(name=f"‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà {row['‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î']}", coords=[row['‡∏û‡∏¥‡∏Å‡∏±‡∏î']])
                point.description = "\n".join([f"{col}: {row[col]}" for col in data.columns if col != '‡∏û‡∏¥‡∏Å‡∏±‡∏î'])
                point.style.iconstyle.color = simplekml.Color.red

        # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏ó‡∏ô `/tmp/`
        temp_dir = tempfile.gettempdir()
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if selected_projects and len(selected_projects) <= 3:
            project_name_part = "-".join(selected_projects)
            output_filename = f"{os.path.splitext(uploaded_file.name)[0]}_{project_name_part}.kml"
        else:
            output_filename = os.path.splitext(uploaded_file.name)[0]
            if selected_projects and len(selected_projects) > 3:
                output_filename += "_selected_projects"
            output_filename += ".kml"
            
        temp_file_path = os.path.join(temp_dir, output_filename)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        kml.save(temp_file_path)

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô BytesIO
        with open(temp_file_path, "rb") as f:
            kml_bytes = BytesIO(f.read())

        status_text.text("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

        return temp_file_path, output_filename, kml_bytes

    except Exception as e:
        status_text.text("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!")
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return None, None, None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô KML
def convert_missing_coords_to_kml(additional_coords_str, status_text, description_dict=None):
    try:
        status_text.text("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå KML
        kml = simplekml.Kml()

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
        main_folder = kml.newfolder(name="‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô")

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if additional_coords_str:
            additional_coords = parse_multiple_coordinates(additional_coords_str)

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô (LineString) ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
            linestring_name = f"{description_dict.get('‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏°‡∏™‡∏≤‡∏¢', '')} {description_dict.get('id', '')}"
            linestring = main_folder.newlinestring(name=linestring_name)
            linestring.coords = additional_coords
            linestring.style.linestyle.color = simplekml.Color.blue
            linestring.style.linestyle.width = 3
            
            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° description ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö LineString
            if description_dict:
                desc_text = "\n".join([f"{key}: {value}" for key, value in description_dict.items()])
                linestring.description = desc_text

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î (Point) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏¥‡∏Å‡∏±‡∏î
            for i, coord in enumerate(additional_coords):
                point = main_folder.newpoint(name=f"‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà {i+1}", coords=[coord])
                point.style.iconstyle.color = simplekml.Color.red
                
                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° description ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î
                if description_dict:
                    point.description = desc_text

        # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏ó‡∏ô `/tmp/`
        temp_dir = tempfile.gettempdir()
        output_filename = f"{description_dict.get('id', 'missing_coords')}.kml"
        if not description_dict.get('id'):
            output_filename = "missing_coords.kml"
        temp_file_path = os.path.join(temp_dir, output_filename)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        kml.save(temp_file_path)

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô BytesIO
        with open(temp_file_path, "rb") as f:
            kml_bytes = BytesIO(f.read())

        status_text.text("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

        return temp_file_path, output_filename, kml_bytes

    except Exception as e:
        status_text.text("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!")
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return None, None, None

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Namespace (KML ‡πÉ‡∏ä‡πâ namespace)
namespace = {'kml': 'http://www.opengis.net/kml/2.2'}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Placemark ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î (Point)
def remove_point_placemarks(parent):
    for placemark in parent.findall("kml:Placemark", namespace):
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏´‡∏ô‡∏î <Point> ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        if placemark.find("kml:Point", namespace) is not None:
            parent.remove(placemark)  

# üîπ ‡πÅ‡∏™‡∏î‡∏á UI ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ
st.set_page_config(page_title="Excel to KML (NTSP)", layout="centered")
st.title("üìç Excel to KML (NTSP)")

# üîπ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î**
uploaded_file = st.file_uploader("üìÇ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel**", type=["xlsx", "xls"])

# üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if uploaded_file is not None:
    try:
        # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô Excel ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Sheet
        excel_data = pd.ExcelFile(uploaded_file)
        sheet_names = excel_data.sheet_names
        sheet_name = st.selectbox("üìÑ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet**", sheet_names)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        preview_data = pd.read_excel(uploaded_file, sheet_name=sheet_name)
        preview_data.columns = preview_data.columns.str.strip()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if '‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' in preview_data.columns:
            # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
            unique_projects = preview_data['‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ'].dropna().unique().tolist()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö multiselect
            st.subheader("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
            selected_projects = st.multiselect(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
                unique_projects
            )
        else:
            selected_projects = None
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        # üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        status_text = st.empty()
        remove_points = st.checkbox("‚ùå ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î (Point)")

        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô KML"):
            # ‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå selected_projects ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô convert_excel_to_kml
            temp_file_path, output_filename, kml_bytes = convert_excel_to_kml(uploaded_file, sheet_name, selected_projects)

            if kml_bytes:
                st.success("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå KML ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

                # üîπ ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏à‡∏≤‡∏Å KML ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                if remove_points:
                    try:
                        tree = ET.parse(temp_file_path)
                        root = tree.getroot()

                        # ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        for doc_or_folder in root.findall(".//kml:Document", namespace) + root.findall(".//kml:Folder", namespace):
                            remove_point_placemarks(doc_or_folder)

                        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î
                        output_kml = os.path.join(tempfile.gettempdir(), output_filename)
                        tree.write(output_kml, encoding="utf-8", xml_declaration=True)

                        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏∏‡∏î
                        with open(output_kml, "rb") as f:
                            kml_bytes = BytesIO(f.read())

                        st.success("‚úî ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

                    except Exception as e:
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î: {e}")
                        st.exception(e)

                # üîπ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML",
                    data=kml_bytes,
                    file_name=output_filename,
                    mime="application/vnd.google-earth.kml+xml"
                )

    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")

# üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô
st.markdown("<br>", unsafe_allow_html=True)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
st.header("üìç ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á expander ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
with st.expander("üìç ‡∏õ‡πâ‡∏≠‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", expanded=False):
    additional_coords_str = st.text_area("üìç ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: (lat,lon)(lat,lon))", key="missing_coords_text_area")
    
    st.divider()  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    
    st.subheader("üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Description)")

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå Excel ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ column ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
    if uploaded_file is not None:
        try:
            # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            excel_data = pd.read_excel(uploaded_file, sheet_name=sheet_name)
            columns = excel_data.columns.tolist()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• description
            description_dict = {}
            
            # ‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            headers = ["id", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "unit_in", "‡∏£‡∏∏‡πà‡∏ô", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ", "‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏°‡∏™‡∏≤‡∏¢", "type", "‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á", "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î"]
            
            # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            col1, col2 = st.columns(2)
            
            for i, header in enumerate(headers):
                if header in columns:
                    # ‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 1 ‡πÅ‡∏•‡∏∞ 2
                    if i % 2 == 0:
                        with col1:
                            value = st.text_input(f"{header}", key=f"desc_{header}")
                            if value:  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
                                description_dict[header] = value
                    else:
                        with col2:
                            value = st.text_input(f"{header}", key=f"desc_{header}")
                            if value:  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
                                description_dict[header] = value
        
        except Exception as e:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ input fields ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            headers = ["id", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "unit_in", "‡∏£‡∏∏‡πà‡∏ô", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ", "‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏°‡∏™‡∏≤‡∏¢", "type", "‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á", "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î"]
            
            # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            col1, col2 = st.columns(2)
            
            description_dict = {}
            for i, header in enumerate(headers):
                if i % 2 == 0:
                    with col1:
                        value = st.text_input(f"{header}", key=f"desc_{header}")
                        if value:
                            description_dict[header] = value
                else:
                    with col2:
                        value = st.text_input(f"{header}", key=f"desc_{header}")
                        if value:
                            description_dict[header] = value
    else:
        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå Excel ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á input fields ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        headers = ["id", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "unit_in", "‡∏£‡∏∏‡πà‡∏ô", "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ", "‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏°‡∏™‡∏≤‡∏¢", "type", "‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á", "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î"]
        
        # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        col1, col2 = st.columns(2)
        
        description_dict = {}
        for i, header in enumerate(headers):
            if i % 2 == 0:
                with col1:
                    value = st.text_input(f"{header}", key=f"desc_{header}")
                    if value:
                        description_dict[header] = value
            else:
                with col2:
                    value = st.text_input(f"{header}", key=f"desc_{header}")
                    if value:
                        description_dict[header] = value

# ‡∏¢‡πâ‡∏≤‡∏¢‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å expander
remove_points = st.checkbox("‚ùå ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î (Point)", key="missing_coords_remove_points")

if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå KML ‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô"):
    status_text = st.empty()
    # ‚úÖ ‡∏™‡πà‡∏á description_dict ‡πÑ‡∏õ‡∏¢‡∏±‡∏á function
    temp_file_path, output_filename, kml_bytes = convert_missing_coords_to_kml(additional_coords_str, status_text, description_dict)

    if kml_bytes:
        st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå KML ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        # üîπ ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏à‡∏≤‡∏Å KML ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if remove_points:
            try:
                tree = ET.parse(temp_file_path)
                root = tree.getroot()

                # ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                for doc_or_folder in root.findall(".//kml:Document", namespace) + root.findall(".//kml:Folder", namespace):
                    remove_point_placemarks(doc_or_folder)

                # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î
                output_kml = os.path.join(tempfile.gettempdir(), output_filename)
                tree.write(output_kml, encoding="utf-8", xml_declaration=True)

                # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏∏‡∏î
                with open(output_kml, "rb") as f:
                    kml_bytes = BytesIO(f.read())

                st.success("‚úî ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î: {e}")
                st.exception(e)

        # üîπ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML",
            data=kml_bytes,
            file_name=output_filename,
            mime="application/vnd.google-earth.kml+xml"
        )
