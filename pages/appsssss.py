import pandas as pd
import streamlit as st

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏≠‡∏á Streamlit
st.set_page_config(page_title="‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ", layout="wide")

# Header ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö
st.title("üìä ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ")

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
uploaded_file = st.file_uploader("üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

if uploaded_file:
    # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
    xls = pd.ExcelFile(uploaded_file)

    # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
    selected_sheet = st.selectbox("üìë ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ", xls.sheet_names)

    if selected_sheet:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏Ç‡πâ‡∏≤‡∏° 6 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å) ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏° MultiIndex ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        df = pd.read_excel(xls, sheet_name=selected_sheet, header=[0,1], skiprows=6)
        df.columns = [' '.join(col).strip() if isinstance(col, tuple) else col for col in df.columns]

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏≤
        #st.write("üîç ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏°‡∏≤:", df.columns.tolist())

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        def find_closest_column(df, column_name):
            return next((col for col in df.columns if column_name in col), None)

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        col_total = find_closest_column(df, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        col_in_area = find_closest_column(df, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô) ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà")

        if col_total and col_in_area:
            df["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"] = df[col_total] == df[col_in_area]
        else:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {col_total}, {col_in_area}")
            st.stop()

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        st.write("üìå **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤:**")
        st.dataframe(df.head())

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        def rename_column(df, expected_name):
            correct_col = next((col for col in df.columns if expected_name in col), None)
            if correct_col:
                df.rename(columns={correct_col: expected_name}, inplace=True)

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        rename_column(df, "tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô")
        rename_column(df, "tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£")
        rename_column(df, "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†.")
        rename_column(df, "‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á(‡∏°‡∏°.)")

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°
        df.rename(columns={
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô) ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà",
            "‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡∏ï‡πâ‡∏ô": "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏ô",
            "‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡∏õ‡∏•‡∏≤‡∏¢": "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢",
        }, inplace=True)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤
        df["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"] = df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] == df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"]

        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        df_match = df[df["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"]].copy()
        df_not_match = df[~df["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"]].copy()

        df_match["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"] = "‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"
        df_not_match["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"] = "‚ùå ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"
        

        def clean_and_split_tags(tags):
            if pd.isna(tags):
                return []
            return [tag.strip() for tag in str(tags).split(',') if tag.strip()]

        df_match["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] = df_match["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"].apply(clean_and_split_tags)
        df_tags_match = df_match.explode("tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô").reset_index(drop=True)


        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ó‡πá‡∏Å
        def process_tags_by_area_order(df):
            result_rows = []
            used_tags = set()

            for comm_tag, comm_group in df.groupby("tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"):
                used_tags = set()
                for idx, (area_idx, row) in enumerate(comm_group.iterrows()):
                    tags = clean_and_split_tags(row["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"])
                    count_in_area = int(row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"])
                    available_tags = [tag for tag in tags if tag not in used_tags]

                    if idx == 0:
                        if len(available_tags) > count_in_area:
                            available_tags = available_tags[-count_in_area:]
                        available_tags.reverse()
                    else:
                        if len(available_tags) > count_in_area:
                            available_tags = available_tags[:count_in_area]

                    used_tags.update(available_tags)

                    for tag in available_tags:
                        new_row = row.copy()
                        new_row["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] = tag
                        result_rows.append(new_row)

            return pd.DataFrame(result_rows)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á
        def calculate_diameter_class(df_match, df_not_match):
            combined_df = pd.concat([df_match, df_not_match])
            grouped = combined_df.groupby(["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†.", "tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"]).agg({
                "‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á(‡∏°‡∏°.)": "sum"
            }).reset_index()
            grouped = grouped.rename(columns={"‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á(‡∏°‡∏°.)": "‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏ß‡∏°"})
            grouped["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = grouped["‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏ß‡∏°"].apply(lambda x: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 63" if x < 63 else "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 63")
            return grouped

        summary_df = calculate_diameter_class(df_tags_match, df_not_match)

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï ‡∏Å‡∏ü‡∏†.
        def summarize_by_area(summary_df):
            summary = summary_df.groupby("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†.")["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].value_counts().unstack(fill_value=0)
            summary = summary.rename(columns={"‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 63": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤_63", "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 63": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤_63"})
            summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag"] = summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤_63"] + summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤_63"]

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ
            summary["‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ"] = (summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤_63"] * 55) + (summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤_63"] * 100)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å ‡∏Å‡∏ü‡∏†.
            total_value = summary["‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ"].sum()
            summary.loc["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = ['', '', '', total_value]

            return summary.reset_index()

        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df_tags_match = df_match.explode("tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô")
        df_tags_not_match = process_tags_by_area_order(df_not_match)
        summary_df = calculate_diameter_class(df_tags_match, df_tags_not_match)
        summarized_area_df = summarize_by_area(summary_df)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        st.write("üìå **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:**")
        st.write("üîπ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô**")
        st.dataframe(df_tags_match.head())
        st.write("üîπ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô**")
        st.dataframe(df_tags_not_match.head())
        st.write("üîπ **‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á**")
        st.dataframe(summary_df)
        st.write("üîπ **‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï ‡∏Å‡∏ü‡∏†.**")
        st.dataframe(summarized_area_df)

        # ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        output_file = "output_summary.xlsx"
        with pd.ExcelWriter(output_file) as writer:
            df_tags_match.to_excel(writer, sheet_name="‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", index=False)
            df_tags_not_match.to_excel(writer, sheet_name="‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", index=False)
            summary_df.to_excel(writer, sheet_name="‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á", index=False)
            summarized_area_df.to_excel(writer, sheet_name="‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï ‡∏Å‡∏ü‡∏†.", index=False)

        with open(output_file, "rb") as file:
            st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", file, file_name="output_summary.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")


    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
with st.expander("‚ÑπÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
    st.write("""
    1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå ZIP ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå KML
    2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ó‡πá‡∏Å (‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏ó‡πá‡∏Å‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)
    3. ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    4. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô

    ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
    - ‡πÑ‡∏ü‡∏•‡πå KML (.kml)
    - ‡πÑ‡∏ü‡∏•‡πå ZIP ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå KML (.zip)
    - ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏Å (.txt)
    """)
