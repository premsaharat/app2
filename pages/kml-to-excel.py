import os
import io
import openpyxl
import streamlit as st
from lxml import etree
from shapely.geometry import LineString
from bs4 import BeautifulSoup
import traceback

# -------------------------------------
# üåü ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á UI ‡∏î‡πâ‡∏ß‡∏¢ CSS & Bootstrap
# -------------------------------------
st.set_page_config(page_title="KML to Excel Converter", page_icon="üìÑ", layout="wide")

st.markdown("""
    <style>
    body {
        background-color: #f8f9fa;
    }
    .main-title {
        color: #007bff;
        text-align: center;
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .sub-title {
        color: #6c757d;
        text-align: center;
        font-size: 18px;
        margin-bottom: 20px;
    }
    .stButton>button {
        background-color: #28a745;
        color: white;
        font-size: 16px;
        border-radius: 10px;
        padding: 12px 20px;
        transition: 0.3s;
    }
    .stButton>button:hover {
        background-color: #218838;
        transform: scale(1.05);
    }
    .stDownloadButton>button {
        background-color: #007bff;
        color: white;
        font-size: 16px;
        border-radius: 10px;
        padding: 12px 20px;
        transition: 0.3s;
    }
    .stDownloadButton>button:hover {
        background-color: #0056b3;
        transform: scale(1.05);
    }
    .error-message {
        color: #dc3545;
        padding: 10px;
        border-radius: 5px;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        margin: 10px 0;
    }
    .success-message {
        color: #28a745;
        padding: 10px;
        border-radius: 5px;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        margin: 10px 0;
    }
    </style>
    """, unsafe_allow_html=True)

# -------------------------------------
# üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
# -------------------------------------
def extract_description_data(description_html):
    """
    Extract structured data from the HTML description.
    
    Args:
        description_html (str): HTML content from KML description
        
    Returns:
        dict: Dictionary containing extracted data
    """
    try:
        soup = BeautifulSoup(description_html, 'html.parser')
        extracted_data = {}
        rows = soup.find_all('tr')
        
        for row in rows:
            cells = row.find_all('td')
            if len(cells) >= 2:
                header = cells[0].get_text(strip=True)  
                value = cells[1].get_text(strip=True)  
                extracted_data[header] = value
                
        return extracted_data
    except Exception as e:
        st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å HTML description ‡πÑ‡∏î‡πâ: {str(e)}")
        return {}

def parse_coordinates(coords_text):
    """
    Parse coordinate text into list of coordinate tuples.
    
    Args:
        coords_text (str): Text containing coordinates
        
    Returns:
        list: List of coordinate tuples [(lon, lat), ...]
    """
    coords = []
    try:
        for c in coords_text.split():
            parts = c.split(',')
            if len(parts) >= 2:
                coords.append((float(parts[0]), float(parts[1])))
            else:
                st.warning(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {c}")
    except ValueError as e:
        st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ: {str(e)}")
    
    return coords

def load_kml_lines(uploaded_file):
    """
    Load lines from a KML file and return them as Shapely LineString objects with metadata.
    
    Args:
        uploaded_file: Streamlit uploaded file object
        
    Returns:
        list: List of dictionaries containing line data
    """
    lines = []
    
    try:
        kml_data = etree.fromstring(uploaded_file.getvalue())
        ns = {'kml': 'http://www.opengis.net/kml/2.2'}
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå KML
        if kml_data.tag != '{http://www.opengis.net/kml/2.2}kml':
            st.error(f"‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå KML ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return []
        
        for placemark in kml_data.xpath('.//kml:Placemark', namespaces=ns):
            try:
                line_string = placemark.xpath('.//kml:LineString/kml:coordinates', namespaces=ns)
                
                if line_string and line_string[0].text:
                    coords_text = line_string[0].text.strip()
                    coords = parse_coordinates(coords_text)
                    
                    if len(coords) > 1:
                        line_geom = LineString(coords)
                        
                        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Placemark
                        name_elements = placemark.xpath('./kml:name/text()', namespaces=ns)
                        name = name_elements[0] if name_elements else "Unnamed"
                        
                        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Placemark
                        description_elements = placemark.xpath('./kml:description/text()', namespaces=ns)
                        description_data = {}
                        
                        if description_elements:
                            try:
                                description_data = extract_description_data(description_elements[0])
                            except Exception as e:
                                st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á '{name}' ‡πÑ‡∏î‡πâ: {str(e)}")
                        
                        lines.append({
                            "Name": name,
                            "Description": description_data,
                            "Line": line_geom,
                            "Start_Coordinate": coords[0] if coords else None,
                            "End_Coordinate": coords[-1] if coords else None
                        })
                    else:
                        st.warning(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á LineString: {placemark.xpath('./kml:name/text()', namespaces=ns)[0] if placemark.xpath('./kml:name/text()', namespaces=ns) else 'Unnamed'}")
                else:
                    # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ LineString
                    pass
                    
            except Exception as e:
                name = placemark.xpath('./kml:name/text()', namespaces=ns)
                name = name[0] if name else "Unnamed"
                st.warning(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Placemark '{name}': {str(e)}")
    
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡πÑ‡∏î‡πâ: {str(e)}")
        st.error(traceback.format_exc())
    
    return lines

def save_to_excel_memory(lines):
    """
    Save line data to Excel in memory.
    
    Args:
        lines (list): List of line dictionaries
        
    Returns:
        BytesIO: Excel file in memory
    """
    try:
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.title = "KML Data"
        
        # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
        if not lines:
            sheet.append(['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'])
            output = io.BytesIO()
            workbook.save(output)
            output.seek(0)
            return output
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        headers = ['Name', 'Start_Coordinate', 'End_Coordinate']
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Description ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏£‡∏Å
        description_headers = []
        for line in lines:
            if isinstance(line.get('Description'), dict) and line['Description']:
                description_headers = list(line['Description'].keys())
                break
        
        headers.extend(description_headers)
        sheet.append(headers)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
        for line in lines:
            row = [
                line.get("Name", "N/A"),
                f"{line['Start_Coordinate'][0]},{line['Start_Coordinate'][1]}" if line.get("Start_Coordinate") else "N/A",
                f"{line['End_Coordinate'][0]},{line['End_Coordinate'][1]}" if line.get("End_Coordinate") else "N/A"
            ]
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Description
            if isinstance(line.get('Description'), dict):
                for header in description_headers:
                    row.append(line['Description'].get(header, "N/A"))
            else:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Description ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                for _ in description_headers:
                    row.append("N/A")
            
            sheet.append(row)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        for column in sheet.columns:
            max_length = 0
            column_letter = openpyxl.utils.get_column_letter(column[0].column)
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2) if max_length < 50 else 50
            sheet.column_dimensions[column_letter].width = adjusted_width
        
        output = io.BytesIO()
        workbook.save(output)
        output.seek(0)
        return output
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel: {str(e)}")
        st.error(traceback.format_exc())
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏•‡πà‡∏°
        empty_workbook = openpyxl.Workbook()
        empty_sheet = empty_workbook.active
        empty_sheet.append(['‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel'])
        empty_output = io.BytesIO()
        empty_workbook.save(empty_output)
        empty_output.seek(0)
        return empty_output

# -------------------------------------
# üéØ ‡∏™‡πà‡∏ß‡∏ô UI ‡∏Ç‡∏≠‡∏á Streamlit
# -------------------------------------
st.markdown('<p class="main-title">KML to Excel Converter üöÄ</p>', unsafe_allow_html=True)
st.markdown('<p class="sub-title">üìÑ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå KML ‡πÄ‡∏õ‡πá‡∏ô Excel ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Metadata</p>', unsafe_allow_html=True)

with st.expander("üìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", expanded=False):
    st.markdown("""
    1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô (LineString)
    2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    3. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
    
    **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:**
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    - ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏™‡πâ‡∏ô (LineString) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå Description ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á HTML
    """)

uploaded_files = st.file_uploader("üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML", type="kml", accept_multiple_files=True)

if uploaded_files:
    # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    st.info(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    if st.button('‚ö° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•'):
        with st.status("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...", expanded=True) as status:
            progress_bar = st.progress(0)
            total_files = len(uploaded_files)
            success_count = 0
            error_count = 0
            
            for i, uploaded_file in enumerate(uploaded_files):
                try:
                    st.write(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}...")
                    
                    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå KML
                    lines = load_kml_lines(uploaded_file)
                    
                    if lines:
                        st.success(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(lines)} ‡πÄ‡∏™‡πâ‡∏ô")
                        
                        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Excel
                        output_memory = save_to_excel_memory(lines)
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                        st.download_button(
                            label=f"üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î {uploaded_file.name.replace('.kml', '.xlsx')}",
                            data=output_memory,
                            file_name=f"{uploaded_file.name.replace('.kml', '.xlsx')}",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                        success_count += 1
                    else:
                        st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}")
                        error_count += 1
                        
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}: {str(e)}")
                    error_count += 1
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                progress_bar.progress((i + 1) / total_files)
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            if success_count > 0:
                st.markdown(f'<p class="success-message">‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {success_count} ‡πÑ‡∏ü‡∏•‡πå</p>', unsafe_allow_html=True)
            if error_count > 0:
                st.markdown(f'<p class="error-message">‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {error_count} ‡πÑ‡∏ü‡∏•‡πå</p>', unsafe_allow_html=True)
                
            status.update(label="‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!", state="complete")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏ü‡∏•‡πå")
