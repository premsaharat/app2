import pandas as pd
import streamlit as st
import numpy as np
from io import BytesIO

# Set up Streamlit page configuration
st.set_page_config(page_title="‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£", layout="wide", initial_sidebar_state="expanded")

# Header
st.title("üìä ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£")
st.markdown("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ô‡∏µ‡πâ")

# File uploader
uploaded_file = st.file_uploader("üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"], help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .xlsx ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

if uploaded_file:
    # Load Excel file
    xls = pd.ExcelFile(uploaded_file)
    
    # Sheet selection
    st.subheader("üìë ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    selected_sheet = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet", xls.sheet_names, help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
    
    if selected_sheet:
        # Load data
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
            df = pd.read_excel(xls, sheet_name=selected_sheet, header=[0,1], skiprows=6)
            df.columns = [' '.join(col).strip() if isinstance(col, tuple) else col for col in df.columns]

        # Function to find closest column
        def find_closest_column(df, column_name):
            return next((col for col in df.columns if column_name in col), None)

        # Find required columns
        col_total = find_closest_column(df, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        col_in_area = find_closest_column(df, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô) ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà")

        if col_total and col_in_area:
            df["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"] = df[col_total] == df[col_in_area]
        else:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {col_total}, {col_in_area}")
            st.stop()

        # Rename columns for consistency
        def rename_column(df, expected_name):
            correct_col = find_closest_column(df, expected_name)
            if correct_col:
                df.rename(columns={correct_col: expected_name}, inplace=True)

        rename_column(df, "tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô")
        rename_column(df, "tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£")
        rename_column(df, "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†.")
        rename_column(df, "‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á(‡∏°‡∏°.)")

        df.rename(columns={
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô) ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà",
            "‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡∏ï‡πâ‡∏ô": "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏ô",
            "‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡∏õ‡∏•‡∏≤‡∏¢": "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢",
        }, inplace=True)

        df["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"] = df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] == df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"]

        # Split data into matching and non-matching
        df_match = df[df["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"]].copy()
        df_not_match = df[~df["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"]].copy()

        df_match["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"] = "‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"
        df_not_match["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"] = "‚ùå ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"

        # Clean and split tags
        def clean_and_split_tags(tags):
            if pd.isna(tags):
                return []
            return [tag.strip() for tag in str(tags).split(',') if tag.strip()]

        df_match["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] = df_match["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"].apply(clean_and_split_tags)
        df_not_match["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] = df_not_match["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"].apply(clean_and_split_tags)

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ç‡∏≠‡∏á tag ‡∏à‡∏≤‡∏Å sheet ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        def find_utility_area_for_tag(tag, df_match):
            # ‡∏Ç‡∏¢‡∏≤‡∏¢ DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ 1 tag ‡∏ï‡πà‡∏≠ 1 ‡πÅ‡∏ñ‡∏ß
            df_match_exploded = df_match.explode("tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô")
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ tag ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            matches = df_match_exploded[df_match_exploded["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] == tag]
            if not matches.empty:
                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ç‡∏≠‡∏á tag ‡∏ô‡∏µ‡πâ
                return matches["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."].iloc[0]
            return None

        # Tag assignment logic (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà)
        unique_comm_tags = df_not_match["tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"].unique()
        tag_assignments = {}

        def display_communication_tag_details(comm_tag, comm_data, df_match, unique_areas, area_details, all_unique_tags):
            """
            ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            
            Parameters:
            -----------
            comm_tag : str
                Tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
            comm_data : DataFrame
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ
            df_match : DataFrame
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            unique_areas : array
                ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö tag ‡∏ô‡∏µ‡πâ
            area_details : list
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            all_unique_tags : list
                ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            
            Returns:
            --------
            dict
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag
            """
            st.write(f"**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£: {comm_tag} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(comm_data)})**")
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á" ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            route_col = find_closest_column(comm_data, "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
            if not route_col:
                route_col = "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á"  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô fallback

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô comm_data ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            comm_tag_details = []
            for _, row in comm_data.iterrows():
                comm_tag_details.append({
                    "tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£": comm_tag,
                    "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á": row.get(route_col, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏") if route_col in comm_data.columns else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                    "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏ô": row["‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏ô"],
                    "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢": row["‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢"],
                    "‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤": row["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."]
                })
            comm_tag_df = pd.DataFrame(comm_tag_details)
            
            if not comm_tag_df.empty:
                # Swap the coordinates in '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏ô' and '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢'
                comm_tag_df["‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏ô"] = comm_tag_df["‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏ô"].apply(lambda x: ', '.join(reversed(x.split(', '))))
                comm_tag_df["‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢"] = comm_tag_df["‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢"].apply(lambda x: ', '.join(reversed(x.split(', '))))
                
                st.dataframe(
                    comm_tag_df[["tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á", "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏ô", "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢", "‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"]],
                    use_container_width=True,
                    height=max(68, min(500, len(comm_tag_df) * 30))
                )
            else:
                st.write("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tag ‡∏ô‡∏µ‡πâ")

            st.write("**‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tag:**")
            st.dataframe(pd.DataFrame([
                {"‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà": detail["area"], 
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà": detail["poles_in_area"], 
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤": detail["tags_count"]} 
                for detail in area_details
            ]), use_container_width=True)

            # ‡πÅ‡∏™‡∏î‡∏á tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            st.write(f"**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({len(all_unique_tags)} tag):**")
            if all_unique_tags:
                st.text_area(
                    "tag ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", 
                    ", ".join(all_unique_tags), 
                    height=max(68, min(150, len(all_unique_tags) * 10)),
                    key=f"all_tags_{comm_tag}"
                )
            else:
                st.write("‡πÑ‡∏°‡πà‡∏°‡∏µ tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ")
            
            tag_assignments = {}
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            if len(unique_areas) == 1:
                return handle_single_area_case(comm_tag, unique_areas, area_details, all_unique_tags)
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            elif len(unique_areas) > 1 and all_unique_tags:
                return handle_multiple_areas_case(comm_tag, unique_areas, area_details, all_unique_tags, df_match)
            else:
                return {comm_tag: {}}

        def handle_single_area_case(comm_tag, unique_areas, area_details, all_unique_tags):
            """
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            """
            tag_assignments = {comm_tag: {}}
            area = unique_areas[0]
            area_index = 0  # ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            
            # UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            st.subheader("üîç ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
            
            if all_unique_tags:
                detail = area_details[area_index]
                poles_in_area = detail["poles_in_area"]
                
                st.info(f"‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ({area}) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: {poles_in_area} ‡∏ï‡πâ‡∏ô")
                
                # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag
                tag_selection_method = st.radio(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag:",
                    ["‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á", "‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏á"],
                    key=f"tag_selection_method_{comm_tag}"
                )
                
                is_custom_input = tag_selection_method == "‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏á"  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                selected_tags = []  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                can_proceed = True  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                
                if is_custom_input:
                    # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà tag ‡πÄ‡∏≠‡∏á
                    custom_tags_input = st.text_area(
                        f"‡∏£‡∏∞‡∏ö‡∏∏ tag ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÉ‡∏´‡πâ {area} (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤ ,)",
                        value="",
                        height=150,
                        key=f"custom_tags_{comm_tag}_{area}"
                    )
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tag
                    if custom_tags_input.strip():
                        selected_tags = [tag.strip() for tag in custom_tags_input.split(",") if tag.strip()]
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tag ‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô all_unique_tags ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        invalid_tags = [tag for tag in selected_tags if tag not in all_unique_tags]
                        if invalid_tags:
                            st.error(f"‡∏û‡∏ö tag ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {', '.join(invalid_tags)}")
                            can_proceed = False
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tag ‡∏ã‡πâ‡∏≥
                        duplicate_tags = []
                        seen_tags = set()
                        for tag in selected_tags:
                            if tag in seen_tags:
                                duplicate_tags.append(tag)
                            else:
                                seen_tags.add(tag)
                        
                        if duplicate_tags:
                            st.error(f"‡∏û‡∏ö tag ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô: {', '.join(duplicate_tags)}")
                            can_proceed = False
                        
                        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tag ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
                        if len(selected_tags) != poles_in_area:
                            if len(selected_tags) < poles_in_area:
                                st.warning(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tag ({len(selected_tags)} tag) ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ({poles_in_area} ‡∏ï‡πâ‡∏ô)")
                            else:
                                st.warning(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tag ({len(selected_tags)} tag) ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ({poles_in_area} ‡∏ï‡πâ‡∏ô)")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á tag ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
                        st.write(f"‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ {len(selected_tags)} tag ‡∏à‡∏≤‡∏Å {len(all_unique_tags)} tag ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {area}")
                        st.text_area(
                            f"tag ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÉ‡∏´‡πâ {area}",
                            ", ".join(selected_tags),
                            height=100,
                            key=f"selected_tags_{comm_tag}_{area}",
                            disabled=True
                        )
                    else:
                        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ tag ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                        
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏á" ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô
                    if st.button(f"‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {area}", key=f"confirm_{comm_tag}_{area}"):
                        if not selected_tags:
                            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ tag ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
                        elif not can_proceed:
                            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
                        else:
                            st.success(f"‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {area} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£
                            tag_assignments[comm_tag] = {area: selected_tags}
                    else:
                        # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
                        tag_assignments[comm_tag] = {area: []}
                        
                else:
                    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tag ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    num_tags_to_select = min(int(poles_in_area), len(all_unique_tags))
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ tag ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if num_tags_to_select < poles_in_area:
                        st.error(f"‡∏°‡∏µ tag ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ({poles_in_area} ‡∏ï‡πâ‡∏ô) ‡∏°‡∏µ tag ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {len(all_unique_tags)} tag")
                        can_proceed = False
                    
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å tag ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    if tag_selection_method == "‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á":
                        selected_tags = all_unique_tags[:num_tags_to_select]
                    else:  # ‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        selected_tags = all_unique_tags[-num_tags_to_select:]
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á tag ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    if selected_tags:
                        st.write(f"‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ {len(selected_tags)} tag ‡∏à‡∏≤‡∏Å {len(all_unique_tags)} tag ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {area}")
                        st.text_area(
                            f"tag ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÉ‡∏´‡πâ {area}",
                            ", ".join(selected_tags),
                            height=100,
                            key=f"selected_tags_{comm_tag}_{area}",
                            disabled=True
                        )
                    
                    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏•‡∏¢
                    tag_assignments[comm_tag] = {area: selected_tags}
            else:
                st.warning(f"‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ({area}) ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô")
                tag_assignments[comm_tag] = {area: []}
            
            return tag_assignments
                
        def handle_multiple_areas_case(comm_tag, unique_areas, area_details, all_unique_tags, df_match):
            """
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            """
            tag_assignments = {comm_tag: {area: [] for area in unique_areas}}
            st.subheader(f"üîÄ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {comm_tag}")
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
            if len(unique_areas) > 2:
                return handle_more_than_two_areas(comm_tag, unique_areas, area_details, all_unique_tags)
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ 2 ‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ tag ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            last_tag = all_unique_tags[-1] if all_unique_tags else None
            first_tag = all_unique_tags[0] if all_unique_tags else None
            
            # ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tag ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            if last_tag:
                found_area, found_tag = check_tag_in_matched_data(last_tag, unique_areas, df_match)
                if found_area:
                    return handle_found_tag_case(comm_tag, unique_areas, area_details, all_unique_tags, found_area, found_tag, "‡∏ó‡πâ‡∏≤‡∏¢", df_match)
            
            # ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tag ‡πÅ‡∏£‡∏Å
            if first_tag:
                found_area, found_tag = check_tag_in_matched_data(first_tag, unique_areas, df_match)
                if found_area:
                    return handle_found_tag_case(comm_tag, unique_areas, area_details, all_unique_tags, found_area, found_tag, "‡∏ï‡πâ‡∏ô", df_match)
            
            # ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 3: ‡πÑ‡∏°‡πà‡∏û‡∏ö tag ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            if last_tag and first_tag:
                st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á tag ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ '{last_tag}' ‡πÅ‡∏•‡∏∞ tag ‡πÅ‡∏£‡∏Å '{first_tag}' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
            
            return handle_manual_assignment(comm_tag, unique_areas, area_details, all_unique_tags)

        def check_tag_in_matched_data(tag, unique_areas, df_match):
            """
            ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tag ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            """
            # ‡∏Ç‡∏¢‡∏≤‡∏¢ DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ 1 tag ‡∏ï‡πà‡∏≠ 1 ‡πÅ‡∏ñ‡∏ß
            df_match_exploded = df_match.explode("tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô")
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ tag ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            matches = df_match_exploded[df_match_exploded["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] == tag]
            if not matches.empty:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                found_area = matches["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."].iloc[0]
                if found_area in unique_areas:
                    return found_area, tag
            return None, None

        def handle_found_tag_case(comm_tag, unique_areas, area_details, all_unique_tags, found_area, found_tag, tag_position, df_match):
            """
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö tag ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            """
            st.success(f"‚úÖ ‡∏û‡∏ö tag {tag_position} '{found_tag}' ‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ {found_area} ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            
            # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö tag ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
            other_areas = [area for area in unique_areas if area != found_area]
            sorted_areas = [found_area] + other_areas
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£
            with st.container():
                st.write("**‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag:**")
                for i, area in enumerate(sorted_areas, 1):
                    area_index = list(unique_areas).index(area)
                    detail = area_details[area_index]
                    st.write(f"{i}. {area}: {detail['poles_in_area']} ‡∏ï‡πâ‡∏ô")
            
            # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö
            tag_assignments = {comm_tag: {area: [] for area in unique_areas}}
            remaining_tags = all_unique_tags.copy()
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á tag ‡∏ó‡∏µ‡πà‡∏û‡∏ö
            if found_tag in remaining_tags:
                # ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                area_index = list(unique_areas).index(found_area)
                detail = area_details[area_index]
                poles_needed = detail["poles_in_area"]
                
                # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà tag ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                if tag_position == "‡∏ï‡πâ‡∏ô":
                    assigned_tags = remaining_tags[:int(poles_needed)]
                # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà tag ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                else:
                    assigned_tags = remaining_tags[-int(poles_needed):]
                
                tag_assignments[comm_tag][found_area] = assigned_tags
                remaining_tags = [tag for tag in remaining_tags if tag not in assigned_tags]
            
            # ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            for area in sorted_areas:
                if area != found_area:  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                    area_index = list(unique_areas).index(area)
                    detail = area_details[area_index]
                    poles_needed = detail["poles_in_area"]
                    if poles_needed <= len(remaining_tags):
                        assigned_tags = remaining_tags[:int(poles_needed)]
                        tag_assignments[comm_tag][area] = assigned_tags
                        remaining_tags = [tag for tag in remaining_tags if tag not in assigned_tags]
                    else:
                        tag_assignments[comm_tag][area] = remaining_tags
                        remaining_tags = []
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£
            display_tag_assignment_results(sorted_areas, tag_assignments, comm_tag)
            
            return tag_assignments

        def handle_more_than_two_areas(comm_tag, unique_areas, area_details, all_unique_tags):
            """
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
            """
            st.warning(f"‚ö†Ô∏è ‡∏°‡∏µ tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ({len(unique_areas)} ‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤) ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏î‡∏π sheet ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            return handle_manual_assignment(comm_tag, unique_areas, area_details, all_unique_tags)

        def handle_manual_assignment(comm_tag, unique_areas, area_details, all_unique_tags):
            """
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ session state
            ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
            """
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session state
            ss_key = f"order_data_{comm_tag}"
            result_key = f"result_{comm_tag}"
            custom_tags_key = f"custom_tags_{comm_tag}"
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô session state ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if ss_key not in st.session_state:
                st.session_state[ss_key] = {area: i + 1 for i, area in enumerate(unique_areas)}
            if result_key not in st.session_state:
                st.session_state[result_key] = None
            if custom_tags_key not in st.session_state:
                st.session_state[custom_tags_key] = {area: "" for area in unique_areas}

            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö return
            tag_assignments = {comm_tag: {area: [] for area in unique_areas}}

            st.write(f"‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {comm_tag}")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£
            assignment_method = st.radio(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag:",
                ["‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", "‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏≠‡∏á"],
                key=f"assignment_method_{comm_tag}"
            )
            
            if assignment_method == "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥":
                # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö
                with st.form(key=f"order_form_{comm_tag}"):
                    cols = st.columns(len(unique_areas))
                    order_values = {}
                    
                    for i, area in enumerate(unique_areas):
                        with cols[i]:
                            order_values[area] = st.number_input(
                                f"{area}",
                                min_value=1,
                                max_value=len(unique_areas),
                                value=st.session_state[ss_key][area],
                                key=f"input_{comm_tag}_{area}"
                            )
                    
                    submit_button = st.form_submit_button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö")
                    
                    if submit_button:
                        st.session_state[ss_key] = order_values
                        sorted_areas = sorted(unique_areas, key=lambda x: st.session_state[ss_key][x])
                        tag_assignments = {comm_tag: {area: [] for area in unique_areas}}
                        remaining_tags = all_unique_tags.copy()
                        
                        for area in sorted_areas:
                            area_index = list(unique_areas).index(area)
                            detail = area_details[area_index]
                            poles_needed = detail["poles_in_area"]
                            if poles_needed <= len(remaining_tags):
                                assigned_tags = remaining_tags[:int(poles_needed)]
                                tag_assignments[comm_tag][area] = assigned_tags
                                remaining_tags = [tag for tag in remaining_tags if tag not in assigned_tags]
                            else:
                                tag_assignments[comm_tag][area] = remaining_tags
                                remaining_tags = []
                        
                        st.session_state[result_key] = {
                            "sorted_areas": sorted_areas,
                            "tag_assignments": tag_assignments
                        }
            
            else:  # ‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏≠‡∏á
                # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏≠‡∏á
                with st.form(key=f"custom_tags_form_{comm_tag}"):
                    custom_tags = {}
                    for area in unique_areas:
                        area_index = list(unique_areas).index(area)
                        detail = area_details[area_index]
                        poles_needed = detail["poles_in_area"]
                        st.write(f"{area}: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {poles_needed} ‡∏ï‡πâ‡∏ô")
                        custom_tags[area] = st.text_area(
                            f"‡∏£‡∏∞‡∏ö‡∏∏ tag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {area} (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤ , ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà {poles_needed} tag)",
                            value=st.session_state[custom_tags_key][area],
                            height=100,
                            key=f"custom_tags_input_{comm_tag}_{area}"
                        )
                    
                    submit_custom_button = st.form_submit_button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ tag")
                    
                    if submit_custom_button:
                        temp_tag_assignments = {comm_tag: {area: [] for area in unique_areas}}
                        valid = True
                        has_warnings = False
                        
                        # ‡πÄ‡∏Å‡πá‡∏ö tag ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
                        used_tags = []
                        
                        for area in unique_areas:
                            area_index = list(unique_areas).index(area)
                            detail = area_details[area_index]
                            poles_needed = detail["poles_in_area"]
                            
                            if custom_tags[area].strip():
                                selected_tags = [tag.strip() for tag in custom_tags[area].split(",") if tag.strip()]
                                
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tag ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                                if len(selected_tags) != poles_needed:
                                    st.warning(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tag ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {area} ({len(selected_tags)}) ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤ ({poles_needed}) ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
                                    has_warnings = True
                                
                                # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ tag ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                                invalid_tags = [tag for tag in selected_tags if tag not in all_unique_tags]
                                if invalid_tags:
                                    st.warning(f"‡∏û‡∏ö tag ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {area}: {', '.join(invalid_tags)}")
                                    has_warnings = True
                                
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏°‡∏µ tag ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô)
                                duplicates_in_area = set([tag for tag in selected_tags if selected_tags.count(tag) > 1])
                                if duplicates_in_area:
                                    st.error(f"‡∏û‡∏ö tag ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà {area}: {', '.join(duplicates_in_area)}")
                                    valid = False
                                
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏°‡∏µ tag ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô)
                                duplicates_across_areas = set([tag for tag in selected_tags if tag in used_tags])
                                if duplicates_across_areas:
                                    st.error(f"‡∏û‡∏ö tag ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {area}: {', '.join(duplicates_across_areas)}")
                                    valid = False
                                
                                if valid:
                                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° tag ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                                    used_tags.extend(selected_tags)
                                    temp_tag_assignments[comm_tag][area] = selected_tags
                                    st.session_state[custom_tags_key][area] = custom_tags[area]
                        
                        if valid:
                            tag_assignments = temp_tag_assignments
                            st.session_state[result_key] = {
                                "sorted_areas": unique_areas,
                                "tag_assignments": tag_assignments
                            }
                            
                            if has_warnings:
                                st.info("‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£ ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            else:
                                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        else:
                            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session state
            if st.session_state[result_key]:
                sorted_areas = st.session_state[result_key]["sorted_areas"]
                tag_assignments = st.session_state[result_key]["tag_assignments"]
                
                st.write("**‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag:**")
                for i, area in enumerate(sorted_areas, 1):
                    area_index = list(unique_areas).index(area)
                    detail = area_details[area_index]
                    poles_needed = detail["poles_in_area"]
                    assigned = tag_assignments[comm_tag][area]
                    st.write(f"{i}. {area}: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {poles_needed} ‡∏ï‡πâ‡∏ô, ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ {len(assigned)} tag")
                
                st.write("**‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤:**")
                for area in sorted_areas:
                    assigned = tag_assignments[comm_tag][area]
                    st.write(f"{area}: {len(assigned)} tag")
                    if assigned:
                        st.text_area(
                            f"tag ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÉ‡∏´‡πâ {area}",
                            ", ".join(assigned),
                            height=100,
                            key=f"tags_{comm_tag}_{area}",
                            disabled=True
                        )
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ tag_assignments ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
            return tag_assignments
                
        def display_tag_assignment_results(sorted_areas, tag_assignments, comm_tag):
            """
            ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag
            """
            st.write("**‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤:**")
            for area in sorted_areas:
                assigned = tag_assignments[comm_tag][area]
                st.write(f"{area}: {len(assigned)} tag")
                if assigned:
                    st.text_area(
                        f"tag ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÉ‡∏´‡πâ {area}", 
                        ", ".join(assigned), 
                        height=100, 
                        key=f"tags_{comm_tag}_{area}"
                    )

        def group_comm_tags_by_case(df_not_match, df_match):
            unique_comm_tags = df_not_match["tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"].unique()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
            tag_groups = {
                "found_tag": [],  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏ö tag ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                "not_found_tag": [],  # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á tag ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞ tag ‡πÅ‡∏£‡∏Å
                "more_than_two_areas": [],  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
                "single_area": []  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            }
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° tag ‡∏ï‡∏≤‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö
            for comm_tag in unique_comm_tags:
                comm_data = df_not_match[df_not_match["tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"] == comm_tag]
                unique_areas = comm_data["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."].unique()
                
                # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° tag ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                all_tags = []
                for _, row in comm_data.iterrows():
                    if not pd.isna(row["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"]).all() and isinstance(row["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"], list):
                        all_tags.extend(row["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"])
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ tag
                all_unique_tags = list(dict.fromkeys(all_tags)) if all_tags else []
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
                if len(unique_areas) == 1:
                    tag_groups["single_area"].append(comm_tag)
                elif len(unique_areas) > 2:
                    tag_groups["more_than_two_areas"].append(comm_tag)
                else:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö tag ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    tag_found = False
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á tag ‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞ tag ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    check_tags = []
                    if all_unique_tags:
                        check_tags = [all_unique_tags[0]]  # Tag ‡πÅ‡∏£‡∏Å
                        if len(all_unique_tags) > 1:
                            check_tags.append(all_unique_tags[-1])  # Tag ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    
                    for tag in check_tags:
                        # ‡∏Ç‡∏¢‡∏≤‡∏¢ DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ 1 tag ‡∏ï‡πà‡∏≠ 1 ‡πÅ‡∏ñ‡∏ß
                        df_match_exploded = df_match.explode("tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô")
                        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ tag ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        matches = df_match_exploded[df_match_exploded["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] == tag]
                        
                        if not matches.empty:
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            found_area = matches["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."].iloc[0]
                            if found_area in unique_areas:
                                tag_groups["found_tag"].append(comm_tag)
                                tag_found = True
                                break
                    
                    if not tag_found:
                        tag_groups["not_found_tag"].append(comm_tag)
            
            return tag_groups

        # ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
        if len(df_not_match) > 0:
            st.subheader("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö
            tag_groups = group_comm_tags_by_case(df_not_match, df_match)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°
            tabs = st.tabs([
                f"‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏™‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏î‡πâ ({len(tag_groups['found_tag'])} tags)",
                f"‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏∏ tag ‡πÄ‡∏™‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ  ({len(tag_groups['not_found_tag'])} tags)",
                f"‚ö†Ô∏è tag ‡πÄ‡∏™‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏î‡∏Ç‡πâ‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ({len(tag_groups['more_than_two_areas'])} tags)",
                f"‚ö†Ô∏è tag ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ ‡∏Å‡∏ü‡∏†.‡∏≠‡∏∑‡πà‡∏ô ({len(tag_groups['single_area'])} tags)"
            ])
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö
            for i, (tab, group_name, group_tags) in enumerate(zip(
                tabs, 
                ["found_tag", "not_found_tag", "more_than_two_areas", "single_area"],
                [tag_groups["found_tag"], tag_groups["not_found_tag"], tag_groups["more_than_two_areas"], tag_groups["single_area"]]
            )):
                with tab:
                    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏ö tag ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    if group_name == "found_tag":
                        if len(group_tags) > 0:
                            st.info(f"‡∏°‡∏µ {len(group_tags)} tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö tag ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
                        else:
                            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ")
                    # ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                    else:
                        if len(group_tags) > 0:
                            for comm_tag in group_tags:
                                comm_data = df_not_match[df_not_match["tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"] == comm_tag]
                                unique_areas = comm_data["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."].unique()
                                
                                area_details = []
                                for area in unique_areas:
                                    area_data = comm_data[comm_data["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."] == area]
                                    total_poles = area_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].sum()
                                    poles_in_area = area_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"].sum()
                                    all_tags = [tag for tag_list in area_data["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] for tag in tag_list]
                                    unique_tags = list(dict.fromkeys(all_tags))
                                    area_details.append({
                                        "area": area,
                                        "poles_in_area": poles_in_area,
                                        "unique_tags": unique_tags,
                                        "tags_count": len(unique_tags)
                                    })
                                
                                all_unique_tags = [tag for detail in area_details for tag in detail["unique_tags"]]
                                all_unique_tags = list(dict.fromkeys(all_unique_tags))
                                
                                with st.expander(f"üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {comm_tag}", expanded=False):
                                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
                                    tag_assignment = display_communication_tag_details(comm_tag, comm_data, df_match, unique_areas, area_details, all_unique_tags)
                                    tag_assignments.update(tag_assignment)
                        else:
                            st.info(f"‡πÑ‡∏°‡πà‡∏°‡∏µ tag ‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ")

        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà", use_container_width=True):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                # ...existing code...           
                def process_tags_by_assignment(df_not_match, tag_assignments):
                    result_rows = []
                    for comm_tag in tag_assignments.keys():
                        comm_group = df_not_match[df_not_match["tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"] == comm_tag]
                        for area, assigned_tags in tag_assignments[comm_tag].items():
                            area_data = comm_group[comm_group["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."] == area]
                            if not area_data.empty:
                                template_row = area_data.iloc[0].copy()
                                for tag in assigned_tags:
                                    new_row = template_row.copy()
                                    new_row["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] = tag
                                    new_row["‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡πà‡∏≤"] = "‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ" if comm_tag in tag_groups["found_tag"] else "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏á"
                                    result_rows.append(new_row)
                    for comm_tag in df_not_match["tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"].unique():
                        if comm_tag not in tag_assignments:
                            comm_group = df_not_match[df_not_match["tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"] == comm_tag]
                            for area, area_group in comm_group.groupby("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."):
                                template_row = area_group.iloc[0].copy()
                                all_tags = [tag for tag_list in area_group["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] for tag in tag_list]
                                unique_tags = list(dict.fromkeys(all_tags))
                                for tag in unique_tags[:int(template_row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏≤(‡∏ï‡πâ‡∏ô)‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"])]:
                                    new_row = template_row.copy()
                                    new_row["tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"] = tag
                                    new_row["‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡πà‡∏≤"] = "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏á"
                                    result_rows.append(new_row)
                    return pd.DataFrame(result_rows)

                # ...existing code...

                def calculate_diameter_class(df_match, df_not_match):
                    combined_df = pd.concat([df_match.explode("tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"), df_not_match])
                    grouped = combined_df.groupby(["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†.", "tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô"]).agg({
                        "‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á(‡∏°‡∏°.)": "sum"
                    }).reset_index()
                    grouped = grouped.rename(columns={"‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á(‡∏°‡∏°.)": "‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏ß‡∏°"})
                    grouped["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = grouped["‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏ß‡∏°"].apply(lambda x: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 63" if x < 63 else "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 63")
                    return grouped

                def summarize_by_area(summary_df):
                    summary = summary_df.groupby("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†.")["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].value_counts().unstack(fill_value=0)
                    summary = summary.rename(columns={"‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 63": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤_63", "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 63": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤_63"})
                    
                    # Ensure the columns exist
                    summary = summary.reindex(columns=["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤_63", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤_63"], fill_value=0)
                    
                    summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag"] = summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤_63"] + summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤_63"]
                    summary["‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ"] = (summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤_63"] * 55) + (summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤_63"] * 100)
                    total_value = summary["‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ"].sum()
                    summary.loc["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = [0, 0, 0, total_value]
                    for col in ["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤_63", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag_‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤_63", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô_tag", "‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏î‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ"]:
                        summary[col] = summary[col].astype('float64')
                    return summary.reset_index()

                def summarize_tag_areas(df):
                    tag_area_summary = df.groupby("tag ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£")["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†."].apply(lambda x: ', '.join(x.unique())).reset_index()
                    tag_area_summary = tag_area_summary.rename(columns={"‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†.": "‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"})
                    tag_area_summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"] = tag_area_summary["‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"].apply(lambda x: len(x.split(', ')))
                    return tag_area_summary

                # Process data
                df_tags_match = df_match.explode("tag ‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô").reset_index(drop=True)
                df_tags_not_match = process_tags_by_assignment(df_not_match, tag_assignments)
                summary_df = calculate_diameter_class(df_match, df_tags_not_match)
                tag_area_summary = summarize_tag_areas(df_tags_not_match)
                summarized_area_df = summarize_by_area(summary_df)

                # Combine the data from "‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô" and "‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô" sheets
                combined_df = pd.concat([df_tags_match, df_tags_not_match])

                # Display results in tabs
                tabs = st.tabs(["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", "‡∏£‡∏ß‡∏°", "‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", "‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï ‡∏Å‡∏ü‡∏†."])
                with tabs[0]:
                    st.dataframe(df_tags_match.head(), use_container_width=True)
                with tabs[1]:
                    st.dataframe(df_tags_not_match.head(), use_container_width=True)
                with tabs[2]:
                    st.dataframe(summary_df, use_container_width=True)
                with tabs[3]:
                    st.dataframe(tag_area_summary, use_container_width=True)
                with tabs[4]:
                    st.dataframe(summarized_area_df, use_container_width=True)
                with tabs[5]:
                    st.dataframe(combined_df.head(), use_container_width=True)

                # Download button
                output = BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df_tags_match.to_excel(writer, sheet_name="‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", index=False)
                    df_tags_not_match.to_excel(writer, sheet_name="‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", index=False)
                    combined_df.to_excel(writer, sheet_name="‡∏£‡∏ß‡∏°", index=False)
                    summary_df.to_excel(writer, sheet_name="‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á", index=False)
                    tag_area_summary.to_excel(writer, sheet_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", index=False)
                    summarized_area_df.to_excel(writer, sheet_name="‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï ‡∏Å‡∏ü‡∏†.", index=False)
                st.download_button(
                    "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", 
                    data=output.getvalue(), 
                    file_name="output_summary.xlsx", 
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
