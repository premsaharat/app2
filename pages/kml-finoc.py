import streamlit as st
import pandas as pd
from lxml import etree
import re
import base64
import io
import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="KML Excel Updater",
    page_icon="üåç",
    layout="wide"
)

# ‡∏™‡πÑ‡∏ï‡∏•‡πå CSS ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
st.markdown("""
<style>
    .main-title {
        font-size: 2rem;
        margin-bottom: 20px;
        color: #1E88E5;
    }
    
    .section-title {
        font-size: 1.5rem;
        margin-top: 15px;
        margin-bottom: 10px;
        color: #1976D2;
    }
    
    .download-button {
        display: inline-block;
        padding: 10px 20px;
        background-color: #2196F3;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 10px;
    }
    
    .download-button:hover {
        background-color: #1976D2;
    }
    
    .stButton > button {
        background-color: #2196F3;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# 1. ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå KML
def read_kml(kml_file):
    parser = etree.XMLParser(remove_blank_text=True)
    tree = etree.parse(kml_file, parser)
    return tree

# 2. ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def read_excel(excel_file):
    df = pd.read_excel(excel_file)
    
    # ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Cable Name" ‡πÄ‡∏õ‡πá‡∏ô string
    if 'Cable Name' in df.columns:
        df['Cable Name'] = df['Cable Name'].astype(str)
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡∏≠‡∏ö)
    df.columns = df.columns.str.strip()
    
    return df

# 3. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô KML ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel
def update_kml_with_excel_data(kml_tree, excel_df):
    root = kml_tree.getroot()
    
    # ‡∏´‡∏≤ namespace ‡∏Ç‡∏≠‡∏á KML
    nsmap = root.nsmap
    kml_ns = '{' + nsmap.get(None, 'http://www.opengis.net/kml/2.2') + '}'
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Placemarks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    placemarks = root.findall('.//' + kml_ns + 'Placemark')
    
    # ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å Excel (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏∏‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß)
    required_columns = [
        'No.', 'Cable Name', 'Cable ID', 'Type', 'Cable Type', 'Standard', 'Brand', 
        '‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô core', '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á(m)', 'Core.km', 'Used core (max.)', 
        'End_A', 'End_B', 'Type_A', 'Type_B', 'Site_A', 'Site_B', 'Zone_A', 'Zone_B',
        'Province_A', 'Province_B', 'LatLng_A', 'LatLng_B', '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', 'Network', 
        '‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô', 'Status', 'Staff', 'Update'
    ]
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    missing_columns = [col for col in required_columns if col not in excel_df.columns]
    
    if missing_columns:
        st.warning(f"‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel: {', '.join(missing_columns)}")
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total_placemarks = len(placemarks)
    updated_count = 0
    
    for i, placemark in enumerate(placemarks):
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress bar
        progress_bar.progress(int((i + 1) / total_placemarks * 100))
        status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•... {i+1}/{total_placemarks}")
        
        # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á placemark
        name_elem = placemark.find(kml_ns + 'name')
        if name_elem is None:
            continue
        
        placemark_name = name_elem.text
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô Excel
        matching_row = excel_df[excel_df['Cable Name'] == placemark_name]
        
        if not matching_row.empty:
            updated_count += 1
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó description
            desc_elem = placemark.find(kml_ns + 'description')
            if desc_elem is None:
                desc_elem = etree.SubElement(placemark, kml_ns + 'description')
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á description ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            description = f"""
            <table border="1" style="border-collapse: collapse; width: 100%;">
                <tr style="background-color: #4285F4; color: white;">
                    <th colspan="2" style="padding: 8px; text-align: center;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢ {placemark_name}</th>
                </tr>
            """
            
            for column in required_columns:
                if column in matching_row.columns:
                    value = matching_row[column].values[0]
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô "-" ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô NaN
                    if pd.isna(value):
                        display_value = "-"
                    else:
                        display_value = value
                    
                    description += f"""
                    <tr>
                        <td style="padding: 6px; border: 1px solid #ddd; font-weight: bold; width: 30%; background-color: #f2f2f2;">{column}</td>
                        <td style="padding: 6px; border: 1px solid #ddd;">{display_value}</td>
                    </tr>
                    """
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
            current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            description += f"""
                <tr>
                    <td style="padding: 6px; border: 1px solid #ddd; font-weight: bold; width: 30%; background-color: #f2f2f2;">Last Updated</td>
                    <td style="padding: 6px; border: 1px solid #ddd;">{current_time}</td>
                </tr>
            </table>
            """
            
            desc_elem.text = etree.CDATA(description)
    
    status_text.text(f"‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß {updated_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_placemarks} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    return kml_tree, updated_count

# 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î (Placemarks) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Excel
def remove_placemarks_not_in_excel(kml_tree, excel_df):
    root = kml_tree.getroot()
    
    # ‡∏´‡∏≤ namespace ‡∏Ç‡∏≠‡∏á KML
    nsmap = root.nsmap
    kml_ns = '{' + nsmap.get(None, 'http://www.opengis.net/kml/2.2') + '}'
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Placemarks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    placemarks = root.findall('.//' + kml_ns + 'Placemark')
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total_placemarks = len(placemarks)
    removed_count = 0
    
    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á placemarks ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö (‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏î‡πâ)
    placemarks_to_remove = []
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    excel_names = set(excel_df['Cable Name'].astype(str).values)
    
    for i, placemark in enumerate(placemarks):
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress bar
        progress_bar.progress(int((i + 1) / total_placemarks * 100))
        status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏∏‡∏î... {i+1}/{total_placemarks}")
        
        # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á placemark
        name_elem = placemark.find(kml_ns + 'name')
        if name_elem is None:
            continue
        
        placemark_name = name_elem.text
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Excel ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if placemark_name not in excel_names:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
            placemarks_to_remove.append(placemark)
            removed_count += 1
    
    # ‡∏•‡∏ö placemarks ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Excel
    for placemark in placemarks_to_remove:
        parent = placemark.getparent()
        if parent is not None:
            parent.remove(placemark)
    
    status_text.text(f"‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Excel ‡πÅ‡∏•‡πâ‡∏ß {removed_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_placemarks} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    return kml_tree, removed_count

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Excel
def remove_points_not_in_excel(kml_tree, excel_df):
    root = kml_tree.getroot()
    
    # ‡∏´‡∏≤ namespace ‡∏Ç‡∏≠‡∏á KML
    nsmap = root.nsmap
    kml_ns = '{' + nsmap.get(None, 'http://www.opengis.net/kml/2.2') + '}'
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Placemarks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    placemarks = root.findall('.//' + kml_ns + 'Placemark')
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total_placemarks = len(placemarks)
    removed_count = 0
    
    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á placemarks ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö (‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏î‡πâ)
    placemarks_to_remove = []
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    excel_names = set(excel_df['Cable Name'].astype(str).values)
    
    for i, placemark in enumerate(placemarks):
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress bar
        progress_bar.progress(int((i + 1) / total_placemarks * 100))
        status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏∏‡∏î... {i+1}/{total_placemarks}")
        
        # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á placemark
        name_elem = placemark.find(kml_ns + 'name')
        if name_elem is None:
            continue
        
        placemark_name = name_elem.text
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Placemark (Point ‡∏´‡∏£‡∏∑‡∏≠ LineString)
        is_point = False
        geometry = placemark.find('.//' + kml_ns + 'Point')
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Point (‡∏´‡∏°‡∏∏‡∏î) ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if geometry is not None:
            is_point = True
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Excel ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
            if placemark_name not in excel_names:
                placemarks_to_remove.append(placemark)
                removed_count += 1
    
    # ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ placemark ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Excel
    for placemark in placemarks_to_remove:
        parent = placemark.getparent()
        if parent is not None:
            parent.remove(placemark)
    
    status_text.text(f"‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î (‡∏à‡∏∏‡∏î) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Excel ‡πÅ‡∏•‡πâ‡∏ß {removed_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    return kml_tree, removed_count

# 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Cable
def style_placemarks_by_type(kml_tree, excel_df, style_column='Type'):
    if style_column not in excel_df.columns:
        return kml_tree, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°"
    
    root = kml_tree.getroot()
    
    # ‡∏´‡∏≤ namespace ‡∏Ç‡∏≠‡∏á KML
    nsmap = root.nsmap
    kml_ns = '{' + nsmap.get(None, 'http://www.opengis.net/kml/2.2') + '}'
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Document node ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    document = root.find('.//' + kml_ns + 'Document')
    if document is None:
        document = etree.SubElement(root, kml_ns + 'Document')
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Excel
    types = excel_df[style_column].dropna().unique()
    
    # ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
    colors = [
        'ff0000ff',  # ‡πÅ‡∏î‡∏á
        'ff00ff00',  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        'ffff0000',  # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
        'ff00ffff',  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        'ffff00ff',  # ‡∏°‡πà‡∏ß‡∏á
        'ff7f00ff',  # ‡∏™‡πâ‡∏°
    ]
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    type_styles = {}
    
    for i, type_name in enumerate(types):
        # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ
        color_index = i % len(colors)
        color = colors[color_index]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Style
        style_id = f"style_{re.sub(r'[^a-zA-Z0-9]', '_', str(type_name))}"
        style = etree.SubElement(document, kml_ns + 'Style', id=style_id)
        
        # LineStyle
        line_style = etree.SubElement(style, kml_ns + 'LineStyle')
        color_elem = etree.SubElement(line_style, kml_ns + 'color')
        color_elem.text = color
        width = etree.SubElement(line_style, kml_ns + 'width')
        width.text = '4'
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞ style
        type_styles[type_name] = style_id
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Placemarks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Style ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    placemarks = root.findall('.//' + kml_ns + 'Placemark')
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total_placemarks = len(placemarks)
    styled_count = 0
    
    for i, placemark in enumerate(placemarks):
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress bar
        progress_bar.progress(int((i + 1) / total_placemarks * 100))
        status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö... {i+1}/{total_placemarks}")
        
        # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á placemark
        name_elem = placemark.find(kml_ns + 'name')
        if name_elem is None:
            continue
        
        placemark_name = name_elem.text
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô Excel
        matching_row = excel_df[excel_df['Cable Name'] == placemark_name]
        
        if not matching_row.empty and style_column in matching_row.columns:
            type_value = matching_row[style_column].values[0]
            if pd.notna(type_value) and type_value in type_styles:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° Style URL ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Placemark
                style_url_elem = placemark.find(kml_ns + 'styleUrl')
                if style_url_elem is None:
                    style_url_elem = etree.SubElement(placemark, kml_ns + 'styleUrl')
                
                style_url_elem.text = f'#{type_styles[type_value]}'
                styled_count += 1
    
    status_text.text(f"‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡πâ‡∏ß {styled_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_placemarks} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    return kml_tree, f"‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° {style_column} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {styled_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
def get_download_link(file_content, filename, text):
    b64 = base64.b64encode(file_content).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}" class="download-button" style="color: #FFFFFF;">{text}</a>'
    return href

# Main Streamlit app
def main():
    # ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
    st.markdown("<h1 class='main-title'>üåç ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KML ‡∏à‡∏≤‡∏Å FINOC</h1>", unsafe_allow_html=True)
    st.write("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô KML ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    tab1, tab2 = st.tabs(["üì§ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", "‚ÑπÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"])
    
    with tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("<h3 class='section-title'>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML</h3>", unsafe_allow_html=True)
            kml_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå KML", type=['kml'])
        
        with col2:
            st.markdown("<h3 class='section-title'>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel</h3>", unsafe_allow_html=True)
            excel_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel", type=['xlsx', 'xls'])
        
        st.markdown("<h3 class='section-title'>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•</h3>", unsafe_allow_html=True)
        
        output_filename = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", "output_updated.kml")
        
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        col1, col2, col3 = st.columns(3)
        
        with col1:
            remove_points = st.checkbox("üîπ ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏∏‡∏î (‡∏à‡∏∏‡∏î) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel")
        
        with col2:
            remove_all_placemarks = st.checkbox("üîπ ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏´‡∏°‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel")
            
            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            if remove_all_placemarks and remove_points:
                remove_points = False
                st.warning("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ")
        
        with col3:
            style_by_type = st.checkbox("üîπ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
        
        if style_by_type:
            style_column = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°", 
                                      ['Type', 'Cable Type'])
        
        process_btn = st.button("‚ñ∂Ô∏è ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
        
        if process_btn:
            if kml_file is None or excel_file is None:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå KML ‡πÅ‡∏•‡∏∞ Excel")
            else:
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                    try:
                        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
                        kml_tree = read_kml(kml_file)
                        excel_df = read_excel(excel_file)
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                        st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel")
                        st.dataframe(excel_df.head())
                        
                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        updated_kml, updated_count = update_kml_with_excel_data(kml_tree, excel_df)
                        
                        # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î (‡∏à‡∏∏‡∏î) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
                        removed_count = 0
                        removed_all_count = 0
                        
                        if remove_points:
                            updated_kml, removed_count = remove_points_not_in_excel(updated_kml, excel_df)
                        
                        # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
                        elif remove_all_placemarks:
                            updated_kml, removed_all_count = remove_placemarks_not_in_excel(updated_kml, excel_df)
                        
                        # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                        style_result = ""
                        if style_by_type:
                            updated_kml, style_result = style_placemarks_by_type(updated_kml, excel_df, style_column)
                        
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô bytes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                        output = io.BytesIO()
                        updated_kml.write(output, pretty_print=True, xml_declaration=True, encoding='UTF-8')
                        output.seek(0)
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                        success_msg = f"‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß {updated_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                        if remove_points and removed_count > 0:
                            success_msg += f"\n‚úÖ ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏∏‡∏î (‡∏à‡∏∏‡∏î) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel {removed_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                        elif remove_all_placemarks and removed_all_count > 0:
                            success_msg += f"\n‚úÖ ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏´‡∏°‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel {removed_all_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                        if style_by_type and style_result:
                            success_msg += f"\n‚úÖ {style_result}"
                        
                        st.success(success_msg)
                        st.markdown(get_download_link(output.getvalue(), output_filename, 
                                                    f"üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß ({output_filename})"), 
                                    unsafe_allow_html=True)
                        
                    except Exception as e:
                        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    with tab2:
        st.markdown("<h3 class='section-title'>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>", unsafe_allow_html=True)
        st.write("""
        1. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        2. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        3. ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
           - ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
           - ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        5. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"
        6. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß
        """)
        
        st.markdown("<h3 class='section-title'>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö</h3>", unsafe_allow_html=True)
        st.write("""
        ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå Excel ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
        * Cable Name - ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏• (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏î‡πÉ‡∏ô KML)
        * ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô Type, Cable ID, Standard, Brand, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô core ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
        
        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Cable Name ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏î‡πÉ‡∏ô KML
        """)
        
        st.info("‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô")

if __name__ == "__main__":
    main()
