import os
import streamlit as st
import tempfile
import zipfile
from lxml import etree
from shapely.geometry import Point, Polygon

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
def clip_and_combine(input_kml, boundary_polygon, output_kml):
    try:
        tree = etree.parse(input_kml)
        root = tree.getroot()
        placemarks_to_remove = []  

        for placemark in root.findall(".//{http://www.opengis.net/kml/2.2}Placemark"):
            coordinates = placemark.find(".//{http://www.opengis.net/kml/2.2}coordinates")
            if coordinates is not None:
                coord_text = coordinates.text.strip()
                coord_list = coord_text.split()
                points = [Point(map(float, coord.split(",")[:2])) for coord in coord_list]
                
                if not any(point.within(boundary_polygon) for point in points):
                    placemarks_to_remove.append(placemark)  

        for placemark in placemarks_to_remove:
            placemark.getparent().remove(placemark)

        # Set the name within the KML content
        document_elem = root.find(".//{http://www.opengis.net/kml/2.2}Document")
        if document_elem is not None:
            name_elem = document_elem.find(".//{http://www.opengis.net/kml/2.2}name")
            if name_elem is None:
                name_elem = etree.SubElement(document_elem, "name")
            name_elem.text = os.path.basename(output_kml)

        tree.write(output_kml, encoding="utf-8", xml_declaration=True)
        return output_kml
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏∏‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
def process_areas_with_red(input_kml, boundary_kml):
    output_files = []
    try:
        boundary_tree = etree.parse(boundary_kml)
        boundary_root = boundary_tree.getroot()

        for boundary_placemark in boundary_root.findall(".//{http://www.opengis.net/kml/2.2}Placemark"):
            boundary_coords = boundary_placemark.find(".//{http://www.opengis.net/kml/2.2}coordinates")
            if boundary_coords is not None:
                coords = boundary_coords.text.strip().split()
                boundary_points = [(float(coord.split(',')[0]), float(coord.split(',')[1])) for coord in coords]
                boundary_polygon = Polygon(boundary_points)

                area_name = boundary_placemark.find(".//{http://www.opengis.net/kml/2.2}name")
                area_name = area_name.text if area_name is not None else "unknown"

                output_kml = f"{area_name}.kml"
                output_kml = clip_and_combine(input_kml, boundary_polygon, output_kml)
                if output_kml:
                    output_files.append(output_kml)
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï: {e}")
    return output_files

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå KML
def combine_kml_files(output_files):
    combined_output_kml = tempfile.NamedTemporaryFile(delete=False, suffix='.kml')
    kml_elem = etree.Element("kml", xmlns="http://www.opengis.net/kml/2.2")
    document_elem = etree.SubElement(kml_elem, "Document")

    # Add a name element to the KML document
    name_elem = etree.SubElement(document_elem, "name")
    name_elem.text = "Combined KML File"

    for file in output_files:
        try:
            tree = etree.parse(file)
            root = tree.getroot()
            for placemark in root.findall(".//{http://www.opengis.net/kml/2.2}Placemark"):
                document_elem.append(placemark)
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå {file}: {e}")

    combined_tree = etree.ElementTree(kml_elem)
    combined_tree.write(combined_output_kml.name, encoding="utf-8", xml_declaration=True)
    return combined_output_kml.name  

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ZIP
def create_zip_for_download(output_files):
    zip_file = tempfile.NamedTemporaryFile(delete=False, suffix='.zip')
    with zipfile.ZipFile(zip_file, 'w') as zipf:
        for file in output_files:
            zipf.write(file, os.path.basename(file))
    return zip_file.name  

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡∏à‡∏≤‡∏Å ZIP
def extract_kml_from_zip(zip_file):
    kml_files = []
    with zipfile.ZipFile(zip_file, 'r') as zipf:
        for file_name in zipf.namelist():
            if file_name.endswith('.kml'):
                with zipf.open(file_name) as kml_file:
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.kml') as temp_file:
                        temp_file.write(kml_file.read())
                        kml_files.append(temp_file.name)
    return kml_files

# Streamlit UI
def main():
    st.set_page_config(page_title="‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å KML", layout="wide")
    st.title("üó∫Ô∏è ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå KML")
    st.markdown("---")

    input_file = st.file_uploader("üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡∏´‡∏£‡∏∑‡∏≠ ZIP ‡∏ó‡∏µ‡πà‡∏°‡∏µ KML ( ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå KML ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå ZIP )", type=['zip', 'kml'])
    boundary_file = st.file_uploader("üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï KML", type=['kml'])

    col1, col2 = st.columns(2)

    with col1:
        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå KML"):
            if input_file and boundary_file:
                with tempfile.NamedTemporaryFile(delete=False, suffix=f".{input_file.name.split('.')[-1]}") as tmp_input:
                    tmp_input.write(input_file.getvalue())
                    input_path = tmp_input.name

                with tempfile.NamedTemporaryFile(delete=False, suffix='.kml') as tmp_boundary:
                    tmp_boundary.write(boundary_file.getvalue())
                    boundary_path = tmp_boundary.name

                try:
                    output_files = []

                    if input_file.name.endswith(".zip"):
                        extracted_kml_files = extract_kml_from_zip(input_path)
                        for kml_file in extracted_kml_files:
                            output_files += process_areas_with_red(kml_file, boundary_path)
                    else:
                        output_files = process_areas_with_red(input_path, boundary_path)

                    if output_files:
                        zip_file_path = create_zip_for_download(output_files)
                        with open(zip_file_path, "rb") as f:
                            st.download_button(
                                label="üì¶ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå",
                                data=f,
                                file_name="output_files.zip",
                                mime="application/zip"
                            )
                finally:
                    os.unlink(input_path)
                    os.unlink(boundary_path)

    with col2:
        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå KML"):
            if input_file and boundary_file:
                with tempfile.NamedTemporaryFile(delete=False, suffix=f".{input_file.name.split('.')[-1]}") as tmp_input:
                    tmp_input.write(input_file.getvalue())
                    input_path = tmp_input.name

                with tempfile.NamedTemporaryFile(delete=False, suffix='.kml') as tmp_boundary:
                    tmp_boundary.write(boundary_file.getvalue())
                    boundary_path = tmp_boundary.name

                try:
                    output_files = []

                    if input_file.name.endswith(".zip"):
                        extracted_kml_files = extract_kml_from_zip(input_path)
                        for kml_file in extracted_kml_files:
                            output_files += process_areas_with_red(kml_file, boundary_path)
                    else:
                        output_files = process_areas_with_red(input_path, boundary_path)

                    if output_files:
                        combined_kml = combine_kml_files(output_files)
                        with open(combined_kml, "rb") as f:
                            st.download_button(
                                label="üîó ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå KML ‡∏£‡∏ß‡∏°",
                                data=f,
                                file_name="combined_output.kml",
                                mime="application/vnd.google-earth.kml+xml"
                            )
                finally:
                    os.unlink(input_path)
                    os.unlink(boundary_path)

            else:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")

    with st.expander("üìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.markdown("""
        1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ( * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå KML ‡∏´‡∏£‡∏∑‡∏≠ ZIP ‡∏ó‡∏µ‡πà‡∏°‡∏µ KML * ) ( * ‡∏Å‡∏£‡∏ì‡∏µ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå KML ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå ZIP * )
        2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï ( * ‡πÑ‡∏ü‡∏•‡πå kml ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô * )  
        3. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå KML" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å  
        4. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå KML" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ç‡∏ï  
        """)

if __name__ == "__main__":
    main()
